// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:ddaliveryflutter/model/api/product_entity.dart';
import 'package:ddaliveryflutter/generated/json/product_entity_helper.dart';
import 'package:ddaliveryflutter/model/api/category_entity.dart';
import 'package:ddaliveryflutter/generated/json/category_entity_helper.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case ProductEntity:
        return productEntityFromJson(data as ProductEntity, json) as T;
      case ProductData:
        return productDataFromJson(data as ProductData, json) as T;
      case ProductDataSeller:
        return productDataSellerFromJson(data as ProductDataSeller, json) as T;
      case ProductDataCategory:
        return productDataCategoryFromJson(data as ProductDataCategory, json)
            as T;
      case CategoryEntity:
        return categoryEntityFromJson(data as CategoryEntity, json) as T;
      case CategoryData:
        return categoryDataFromJson(data as CategoryData, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case ProductEntity:
        return productEntityToJson(data as ProductEntity);
      case ProductData:
        return productDataToJson(data as ProductData);
      case ProductDataSeller:
        return productDataSellerToJson(data as ProductDataSeller);
      case ProductDataCategory:
        return productDataCategoryToJson(data as ProductDataCategory);
      case CategoryEntity:
        return categoryEntityToJson(data as CategoryEntity);
      case CategoryData:
        return categoryDataToJson(data as CategoryData);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {
      case 'ProductEntity':
        return ProductEntity().fromJson(json);
      case 'ProductData':
        return ProductData().fromJson(json);
      case 'ProductDataSeller':
        return ProductDataSeller().fromJson(json);
      case 'ProductDataCategory':
        return ProductDataCategory().fromJson(json);
      case 'CategoryEntity':
        return CategoryEntity().fromJson(json);
      case 'CategoryData':
        return CategoryData().fromJson(json);
    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {
      case 'ProductEntity':
        return List<ProductEntity>();
      case 'ProductData':
        return List<ProductData>();
      case 'ProductDataSeller':
        return List<ProductDataSeller>();
      case 'ProductDataCategory':
        return List<ProductDataCategory>();
      case 'CategoryEntity':
        return List<CategoryEntity>();
      case 'CategoryData':
        return List<CategoryData>();
    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}
